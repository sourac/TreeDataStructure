package com.atul.learning.Spring;

public class WidthOfBinaryTree {
	Node root;

	public static void main(String[] args) {
		WidthOfBinaryTree tree = new WidthOfBinaryTree();
		tree.root = new Node(1);
		tree.root.left = new Node(2);
		tree.root.right = new Node(3);
		tree.root.left.left = new Node(4);
		tree.root.left.right = new Node(5);
		tree.root.right.right = new Node(8);
		tree.root.right.right.left = new Node(6);
		tree.root.right.right.right = new Node(7);
		int maxWidth = getMaxWidth(tree.root);
		System.out.println("Max width is :" + maxWidth);
	}

	/* function to give the max width of the tree. */
	private static int getMaxWidth(Node root) {
		int maxWidth = 0;
		int width;
		int h = height(root);
		for (int i = 1; i <= h; i++) {
			width = getWidth(root, i);
			if (width > maxWidth)
				maxWidth = width;
		}

		return maxWidth;
	}

	/* width of a given level */
	private static int getWidth(Node root, int level) {
		if (root == null)
			return 0;
		if (level == 1)
			return 1;
		else if (level > 1) {
			return getWidth(root.left, level - 1) + getWidth(root.right, level - 1);
		}
		return 0;
	}

	/* utility function to compute the height of the tree */
	private static int height(Node root) {
		if (root == null)
			return 0;
		else {
			int lheight = height(root.left);
			int rheight = height(root.right);
			return (lheight > rheight) ? (lheight + 1) : (rheight + 1);
		}
	}
}
